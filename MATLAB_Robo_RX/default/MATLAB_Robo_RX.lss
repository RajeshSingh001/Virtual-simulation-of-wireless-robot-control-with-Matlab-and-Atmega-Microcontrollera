
MATLAB_Robo_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000003e8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d5  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008c7  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000340  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000715  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b3  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000036b  00000000  00000000  00001b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"lcd.h"

void main()
{
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
	USARTInit(51);
  8a:	83 e3       	ldi	r24, 0x33	; 51
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 a3 01 	call	0x346	; 0x346 <USARTInit>
	InitLCD(0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 03 01 	call	0x206	; 0x206 <InitLCD>
	char data;
	DDRB=0xFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bb       	out	0x17, r24	; 23
	LCDWriteStringXY(0,0,"MATLAB GUI");
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 2e 01 	call	0x25c	; 0x25c <LCDWriteString>
	LCDWriteStringXY(0,1,"With PROTEUS");
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
  b4:	8b e6       	ldi	r24, 0x6B	; 107
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 2e 01 	call	0x25c	; 0x25c <LCDWriteString>
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	29 e1       	ldi	r18, 0x19	; 25
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <main+0x42>
	_delay_ms(1000);
	LCDClear();
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDByte>
	LCDWriteStringXY(0,0,"wtg--------");
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
  e2:	88 e7       	ldi	r24, 0x78	; 120
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 2e 01 	call	0x25c	; 0x25c <LCDWriteString>
	{
	data= USARTReadChar();
	if(data=='a')
	   {
	    
	 	PORTB=0b00001010;
  ea:	9a e0       	ldi	r25, 0x0A	; 10
  ec:	e9 2e       	mov	r14, r25
		//USARTWriteChar('c');
		}

	else if(data=='d')
	   {
	 	PORTB=0b00001000;
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	f8 2e       	mov	r15, r24
		LCDWriteStringXY(0,0,"REV");
		//USARTWriteChar('b');
    	}
	else if(data=='c')
	   {
	 	PORTB=0b00000010;
  f2:	02 e0       	ldi	r16, 0x02	; 2
		LCDWriteStringXY(0,0,"FRD");
		//USARTWriteChar('a');
    	}
	else if(data=='b')
	   {
	 	PORTB=0b00000101;
  f4:	15 e0       	ldi	r17, 0x05	; 5
	_delay_ms(1000);
	LCDClear();
	LCDWriteStringXY(0,0,"wtg--------");
	while(1)
	{
	data= USARTReadChar();
  f6:	0e 94 aa 01 	call	0x354	; 0x354 <USARTReadChar>
	if(data=='a')
  fa:	81 36       	cpi	r24, 0x61	; 97
  fc:	41 f4       	brne	.+16     	; 0x10e <main+0x8c>
	   {
	    
	 	PORTB=0b00001010;
  fe:	e8 ba       	out	0x18, r14	; 24
		LCDWriteStringXY(0,0,"FRD");
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
 108:	84 e8       	ldi	r24, 0x84	; 132
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	27 c0       	rjmp	.+78     	; 0x15c <main+0xda>
		//USARTWriteChar('a');
    	}
	else if(data=='b')
 10e:	82 36       	cpi	r24, 0x62	; 98
 110:	41 f4       	brne	.+16     	; 0x122 <main+0xa0>
	   {
	 	PORTB=0b00000101;
 112:	18 bb       	out	0x18, r17	; 24
		LCDWriteStringXY(0,0,"REV");
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
 11c:	88 e8       	ldi	r24, 0x88	; 136
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	1d c0       	rjmp	.+58     	; 0x15c <main+0xda>
		//USARTWriteChar('b');
    	}
	else if(data=='c')
 122:	83 36       	cpi	r24, 0x63	; 99
 124:	41 f4       	brne	.+16     	; 0x136 <main+0xb4>
	   {
	 	PORTB=0b00000010;
 126:	08 bb       	out	0x18, r16	; 24
		LCDWriteStringXY(0,0,"RGT");
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
 130:	8c e8       	ldi	r24, 0x8C	; 140
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	13 c0       	rjmp	.+38     	; 0x15c <main+0xda>
		//USARTWriteChar('c');
		}

	else if(data=='d')
 136:	84 36       	cpi	r24, 0x64	; 100
 138:	41 f4       	brne	.+16     	; 0x14a <main+0xc8>
	   {
	 	PORTB=0b00001000;
 13a:	f8 ba       	out	0x18, r15	; 24
		LCDWriteStringXY(0,0,"LFT");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
 144:	80 e9       	ldi	r24, 0x90	; 144
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	09 c0       	rjmp	.+18     	; 0x15c <main+0xda>
		//USARTWriteChar('d');
		}
	else if(data=='e') 
 14a:	85 36       	cpi	r24, 0x65	; 101
 14c:	a1 f6       	brne	.-88     	; 0xf6 <main+0x74>
	   {
	    PORTB=0b00000000;
 14e:	18 ba       	out	0x18, r1	; 24
		LCDWriteStringXY(0,0,"STP");
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	0e 94 9a 01 	call	0x334	; 0x334 <LCDGotoXY>
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 2e 01 	call	0x25c	; 0x25c <LCDWriteString>
 160:	ca cf       	rjmp	.-108    	; 0xf6 <main+0x74>

00000162 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 162:	84 b3       	in	r24, 0x14	; 20
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 168:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 16a:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	97 9a       	sbi	0x12, 7	; 18
 176:	82 2f       	mov	r24, r18
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 17c:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	92 2f       	mov	r25, r18
 184:	9a 95       	dec	r25
 186:	f1 f7       	brne	.-4      	; 0x184 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 188:	97 98       	cbi	0x12, 7	; 18
 18a:	92 2f       	mov	r25, r18
 18c:	9a 95       	dec	r25
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 190:	97 9a       	sbi	0x12, 7	; 18
 192:	92 2f       	mov	r25, r18
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 198:	93 b3       	in	r25, 0x13	; 19
 19a:	92 2f       	mov	r25, r18
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1a0:	97 98       	cbi	0x12, 7	; 18
 1a2:	92 2f       	mov	r25, r18
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1a8:	87 fd       	sbrc	r24, 7
 1aa:	e4 cf       	rjmp	.-56     	; 0x174 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1ac:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1ae:	84 b3       	in	r24, 0x14	; 20
 1b0:	8f 60       	ori	r24, 0x0F	; 15
 1b2:	84 bb       	out	0x14, r24	; 20

}
 1b4:	08 95       	ret

000001b6 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1b6:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1b8:	66 23       	and	r22, r22
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <LCDByte+0xa>
	CLEAR_RS();
 1bc:	96 98       	cbi	0x12, 6	; 18
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <LCDByte+0xc>
else
	SET_RS();
 1c0:	96 9a       	sbi	0x12, 6	; 18
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	82 2f       	mov	r24, r18
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1ca:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1cc:	85 b3       	in	r24, 0x15	; 21
 1ce:	93 2f       	mov	r25, r19
 1d0:	92 95       	swap	r25
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	80 7f       	andi	r24, 0xF0	; 240
 1d6:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1d8:	95 bb       	out	0x15, r25	; 21
 1da:	82 2f       	mov	r24, r18
 1dc:	8a 95       	dec	r24
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1e0:	97 98       	cbi	0x12, 7	; 18
 1e2:	82 2f       	mov	r24, r18
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1e8:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1ea:	85 b3       	in	r24, 0x15	; 21
 1ec:	3f 70       	andi	r19, 0x0F	; 15
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	82 2f       	mov	r24, r18
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1fa:	97 98       	cbi	0x12, 7	; 18
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 200:	0e 94 b1 00 	call	0x162	; 0x162 <LCDBusyLoop>
}
 204:	08 95       	ret

00000206 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 206:	1f 93       	push	r17
 208:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20a:	8b e3       	ldi	r24, 0x3B	; 59
 20c:	9b e2       	ldi	r25, 0x2B	; 43
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 212:	84 b3       	in	r24, 0x14	; 20
 214:	8f 60       	ori	r24, 0x0F	; 15
 216:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 218:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 21a:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 21c:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 21e:	85 b3       	in	r24, 0x15	; 21
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 224:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 226:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 228:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	98 2f       	mov	r25, r24
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 232:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 234:	a9 9a       	sbi	0x15, 1	; 21
 236:	98 2f       	mov	r25, r24
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 23c:	97 98       	cbi	0x12, 7	; 18
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 242:	0e 94 b1 00 	call	0x162	; 0x162 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 246:	81 2f       	mov	r24, r17
 248:	8c 60       	ori	r24, 0x0C	; 12
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 250:	88 e2       	ldi	r24, 0x28	; 40
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDByte>
}
 258:	1f 91       	pop	r17
 25a:	08 95       	ret

0000025c <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
 262:	04 c0       	rjmp	.+8      	; 0x26c <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDByte>
	msg++;
 26a:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 26c:	88 81       	ld	r24, Y
 26e:	88 23       	and	r24, r24
 270:	c9 f7       	brne	.-14     	; 0x264 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	00 d0       	rcall	.+0      	; 0x286 <LCDWriteInt+0xe>
 286:	00 d0       	rcall	.+0      	; 0x288 <LCDWriteInt+0x10>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	9c 01       	movw	r18, r24
 290:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 292:	fe 01       	movw	r30, r28
 294:	31 96       	adiw	r30, 0x01	; 1
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	df 01       	movw	r26, r30
 29a:	1d 92       	st	X+, r1
 29c:	8a 95       	dec	r24
 29e:	e9 f7       	brne	.-6      	; 0x29a <LCDWriteInt+0x22>
 2a0:	fe 01       	movw	r30, r28
 2a2:	35 96       	adiw	r30, 0x05	; 5
 2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2a6:	c9 01       	movw	r24, r18
 2a8:	6a e0       	ldi	r22, 0x0A	; 10
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 cb 01 	call	0x396	; 0x396 <__divmodhi4>
 2b0:	80 83       	st	Z, r24
	val=val/10;
 2b2:	c9 01       	movw	r24, r18
 2b4:	6a e0       	ldi	r22, 0x0A	; 10
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 cb 01 	call	0x396	; 0x396 <__divmodhi4>
 2bc:	9b 01       	movw	r18, r22
 2be:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2c0:	21 15       	cp	r18, r1
 2c2:	31 05       	cpc	r19, r1
 2c4:	81 f7       	brne	.-32     	; 0x2a6 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2c6:	bf ef       	ldi	r27, 0xFF	; 255
 2c8:	0f 3f       	cpi	r16, 0xFF	; 255
 2ca:	1b 07       	cpc	r17, r27
 2cc:	79 f4       	brne	.+30     	; 0x2ec <LCDWriteInt+0x74>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2d2:	ae 01       	movw	r20, r28
 2d4:	4f 5f       	subi	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <LCDWriteInt+0x66>
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	fa 01       	movw	r30, r20
 2e0:	e2 0f       	add	r30, r18
 2e2:	f3 1f       	adc	r31, r19
 2e4:	80 81       	ld	r24, Z
 2e6:	88 23       	and	r24, r24
 2e8:	c1 f3       	breq	.-16     	; 0x2da <LCDWriteInt+0x62>
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2ec:	25 e0       	ldi	r18, 0x05	; 5
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	20 1b       	sub	r18, r16
 2f2:	31 0b       	sbc	r19, r17
 2f4:	7e 01       	movw	r14, r28
 2f6:	08 94       	sec
 2f8:	e1 1c       	adc	r14, r1
 2fa:	f1 1c       	adc	r15, r1
 2fc:	e2 0e       	add	r14, r18
 2fe:	f3 1e       	adc	r15, r19
 300:	89 01       	movw	r16, r18
 302:	09 c0       	rjmp	.+18     	; 0x316 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 304:	f7 01       	movw	r30, r14
 306:	81 91       	ld	r24, Z+
 308:	7f 01       	movw	r14, r30
 30a:	80 5d       	subi	r24, 0xD0	; 208
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 312:	0f 5f       	subi	r16, 0xFF	; 255
 314:	1f 4f       	sbci	r17, 0xFF	; 255
 316:	05 30       	cpi	r16, 0x05	; 5
 318:	11 05       	cpc	r17, r1
 31a:	a4 f3       	brlt	.-24     	; 0x304 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	cf 91       	pop	r28
 328:	df 91       	pop	r29
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 334:	88 32       	cpi	r24, 0x28	; 40
 336:	30 f4       	brcc	.+12     	; 0x344 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 338:	61 11       	cpse	r22, r1
 33a:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 33c:	80 68       	ori	r24, 0x80	; 128
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDByte>
 344:	08 95       	ret

00000346 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 346:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 348:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 34a:	86 e8       	ldi	r24, 0x86	; 134
 34c:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 34e:	88 ed       	ldi	r24, 0xD8	; 216
 350:	8a b9       	out	0x0a, r24	; 10


}
 352:	08 95       	ret

00000354 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 354:	5f 9b       	sbis	0x0b, 7	; 11
 356:	fe cf       	rjmp	.-4      	; 0x354 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 358:	8c b1       	in	r24, 0x0c	; 12
}
 35a:	08 95       	ret

0000035c <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 35c:	5d 9b       	sbis	0x0b, 5	; 11
 35e:	fe cf       	rjmp	.-4      	; 0x35c <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 360:	8c b9       	out	0x0c, r24	; 12
}
 362:	08 95       	ret

00000364 <write>:
void write(char data[])
{
 364:	fc 01       	movw	r30, r24
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 366:	5d 9b       	sbis	0x0b, 5	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <write+0x2>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 36a:	83 e2       	ldi	r24, 0x23	; 35
 36c:	8c b9       	out	0x0c, r24	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 36e:	5d 9b       	sbis	0x0b, 5	; 11
 370:	fe cf       	rjmp	.-4      	; 0x36e <write+0xa>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	8c b9       	out	0x0c, r24	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 376:	5d 9b       	sbis	0x0b, 5	; 11
 378:	fe cf       	rjmp	.-4      	; 0x376 <write+0x12>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	03 c0       	rjmp	.+6      	; 0x384 <write+0x20>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 37e:	5d 9b       	sbis	0x0b, 5	; 11
 380:	fe cf       	rjmp	.-4      	; 0x37e <write+0x1a>
{
	USARTWriteChar('#');
	USARTWriteChar(3);
	USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
 382:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 384:	8c b9       	out	0x0c, r24	; 12
{
	USARTWriteChar('#');
	USARTWriteChar(3);
	USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
 386:	80 81       	ld	r24, Z
 388:	88 23       	and	r24, r24
 38a:	c9 f7       	brne	.-14     	; 0x37e <write+0x1a>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 38c:	5d 9b       	sbis	0x0b, 5	; 11
 38e:	fe cf       	rjmp	.-4      	; 0x38c <write+0x28>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 390:	8a e0       	ldi	r24, 0x0A	; 10
 392:	8c b9       	out	0x0c, r24	; 12
	USARTWriteChar(3);
	USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
	USARTWriteChar('\n');
}
 394:	08 95       	ret

00000396 <__divmodhi4>:
 396:	97 fb       	bst	r25, 7
 398:	09 2e       	mov	r0, r25
 39a:	07 26       	eor	r0, r23
 39c:	0a d0       	rcall	.+20     	; 0x3b2 <__divmodhi4_neg1>
 39e:	77 fd       	sbrc	r23, 7
 3a0:	04 d0       	rcall	.+8      	; 0x3aa <__divmodhi4_neg2>
 3a2:	0c d0       	rcall	.+24     	; 0x3bc <__udivmodhi4>
 3a4:	06 d0       	rcall	.+12     	; 0x3b2 <__divmodhi4_neg1>
 3a6:	00 20       	and	r0, r0
 3a8:	1a f4       	brpl	.+6      	; 0x3b0 <__divmodhi4_exit>

000003aa <__divmodhi4_neg2>:
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255

000003b0 <__divmodhi4_exit>:
 3b0:	08 95       	ret

000003b2 <__divmodhi4_neg1>:
 3b2:	f6 f7       	brtc	.-4      	; 0x3b0 <__divmodhi4_exit>
 3b4:	90 95       	com	r25
 3b6:	81 95       	neg	r24
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	08 95       	ret

000003bc <__udivmodhi4>:
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	51 e1       	ldi	r21, 0x11	; 17
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__udivmodhi4_ep>

000003c4 <__udivmodhi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	a6 17       	cp	r26, r22
 3ca:	b7 07       	cpc	r27, r23
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__udivmodhi4_ep>
 3ce:	a6 1b       	sub	r26, r22
 3d0:	b7 0b       	sbc	r27, r23

000003d2 <__udivmodhi4_ep>:
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	5a 95       	dec	r21
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__udivmodhi4_loop>
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	bc 01       	movw	r22, r24
 3e0:	cd 01       	movw	r24, r26
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
